// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "darwin-arm64", "debian-openssl-1.1.x", "linux-arm64-openssl-1.1.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Users {
  id             Int      @id @default(autoincrement())
  email          String
  password       String
  name           String
  role           UserRole @default(USER)
  profilePicture String   @default("")
  phone          String   @default("")
  city           String   @default("")
  address        String   @default("")
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}

enum UserRole {
  ADMIN
  USER
}

model ArticleCategories {
  id          Int        @id @default(autoincrement())
  title       String
  description String     @default("")
  image       String
  articles    Articles[]
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
}

model Articles {
  id         Int               @id @default(autoincrement())
  categoryId Int
  title      String
  subtitle   String            @default("")
  content    String
  image      String
  status     ItemStatus        @default(INACTIVE)
  category   ArticleCategories @relation(fields: [categoryId], references: [id])
  createdAt  DateTime          @default(now())
  updatedAt  DateTime          @updatedAt
}

model SavedArticles {
  id        String   @id
  userId    Int
  articleId Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Batik {
  id          Int      @id @default(autoincrement())
  name        String
  description String
  city        String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model ScanHistory {
  id          String        @id
  userId      Int
  image       String
  status      ProcessStatus
  result      Json
  rawResponse String
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
}

model Question {
  id        Int      @id @default(autoincrement())
  content   String
  hasImage  Boolean
  image     String?
  options   Answer[]
  isActive  Boolean
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Answer {
  id          Int      @id @default(autoincrement())
  questionId  Int
  content     String
  explanation String
  hasImage    Boolean
  image       String?
  question    Question @relation(fields: [questionId], references: [id])
  isCorrect   Boolean
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model QuizHistory {
  id           String     @id
  userId       Int
  score        Int
  questionList String     @default("")
  status       QuizStatus @default(DOING)
  state        Int        @default(1)
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
}

model QuizHistoryDetail {
  quizHistoryId      String
  number             Int
  question           String
  isCorrect          Boolean
  explanation        String
  correctExplanation String
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt

  @@id([quizHistoryId, number])
}

enum ItemStatus {
  ACTIVE
  INACTIVE
}

enum ProcessStatus {
  SUCCESS
  FAILED
}

enum QuizStatus {
  DOING
  DONE
}
